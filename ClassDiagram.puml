@startuml
namespace parser {
    class Field << (S,Aquamarine) >> {
        + Name string
        + Type string
        + FullType string

    }
    class LineStringBuilder << (S,Aquamarine) >> {
        + WriteLineWithDepth(depth int, str string) 

    }
    class ClassParser << (S,Aquamarine) >> {
        - structure <font color=blue>map</font>[string]<font color=blue>map</font>[string]*Struct
        - currentPackageName string
        - allInterfaces <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allStructs <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allImports <font color=blue>map</font>[string]string

        - parsePackage(node ast.Node) 
        - parseImports(impt *ast.ImportSpec) 
        - parseDirectory(directoryPath string) {packageName}error
        - parseFileDeclarations(node ast.Decl) 
        - renderStructures(pack string, structures <font color=blue>map</font>[string]*{packageName}Struct, str *{packageName}LineStringBuilder) 
        - renderStructure(structure *{packageName}Struct, pack string, name string, str *{packageName}LineStringBuilder, composition *{packageName}LineStringBuilder, extends *{packageName}LineStringBuilder) 
        - renderCompositions(structure *{packageName}Struct, name string, composition *{packageName}LineStringBuilder) 
        - renderExtends(structure *{packageName}Struct, name string, extends *{packageName}LineStringBuilder) 
        - renderStructMethods(structure *{packageName}Struct, privateMethods *{packageName}LineStringBuilder, publicMethods *{packageName}LineStringBuilder) 
        - renderStructFields(structure *{packageName}Struct, privateFields *{packageName}LineStringBuilder, publicFields *{packageName}LineStringBuilder) 
        - getOrCreateStruct(name string) *{packageName}Struct
        - getStruct(structName string) *{packageName}Struct

        + Render() string

    }
    class Struct << (S,Aquamarine) >> {
        + PackageName string
        + Functions []*Function
        + Fields []*Field
        + Type string
        + Composition <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        + Extends <font color=blue>map</font>[string]<font color=blue>struct</font>{}

        + ImplementsInterface(inter *{packageName}Struct) bool
        + AddToComposition(fType string) 
        + AddToExtends(fType string) 
        + AddField(field *ast.Field, aliases <font color=blue>map</font>[string]string) 
        + AddMethod(method *ast.Field, aliases <font color=blue>map</font>[string]string) 

    }
    class Function << (S,Aquamarine) >> {
        + Name string
        + Parameters []*Field
        + ReturnValues []string
        + PackageName string
        + FullNameReturnValues []string

        + SignturesAreEqual(function *{packageName}Function) bool

    }
}
strings.Builder *-- parser.LineStringBuilder


@enduml