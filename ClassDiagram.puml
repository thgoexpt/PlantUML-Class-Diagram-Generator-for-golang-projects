@startuml
namespace main {
    class NewParser << (S,Aquamarine) >> {
    }
}
parser.ClassParser *-- main.NewParser


namespace parser {
    class Struct << (S,Aquamarine) >> {
        + PackageName string
        + Functions []Function
        + Fields []Field
        + Type string
        + Composition []string
        + Extends []string

        + ImplementsInterface(inter Struct) 
        + AddToComposition(fType string) 
        + AddToExtends(fType string) 
        + AddField(field ast.Field, aliases <font color=blue>map</font>[string]string) 
        + AddMethod(method ast.Field, aliases <font color=blue>map</font>[string]string) 

    }
    class Function << (S,Aquamarine) >> {
        + Name string
        + Parameters []Field
        + ReturnValues []string

        + SignturesAreEqual(function Function) 

    }
    class Field << (S,Aquamarine) >> {
        + Name string
        + Type string

    }
    class LineStringBuilder << (S,Aquamarine) >> {
        + WriteLineWithDepth(depth int, str string) 

    }
    class ClassParser << (S,Aquamarine) >> {
        - structure <font color=blue>map</font>[string]<font color=blue>map</font>[string]Struct
        - currentPackageName string
        - allInterfaces <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allStructs <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allImports <font color=blue>map</font>[string]string

        - parsePackage(node ast.Node) 
        - parseImports(impt ast.ImportSpec) 
        - parseDirectory(directoryPath string) 
        - parseFileDeclarations(node ast.Decl) 
        - renderStructures(pack string, structures <font color=blue>map</font>[string]Struct, str LineStringBuilder) 
        - renderStructure(structure Struct, pack string, name string, str LineStringBuilder, composition LineStringBuilder, extends LineStringBuilder) 
        - renderCompositions(structure Struct, name string, composition LineStringBuilder) 
        - renderExtends(structure Struct, name string, extends LineStringBuilder) 
        - renderStructMethods(structure Struct, privateMethods LineStringBuilder, publicMethods LineStringBuilder) 
        - renderStructFields(structure Struct, privateFields LineStringBuilder, publicFields LineStringBuilder) 
        - getOrCreateStruct(name string) 
        - getStruct(structName string) 

        + Render() 

    }
}
strings.Builder *-- parser.LineStringBuilder


@enduml