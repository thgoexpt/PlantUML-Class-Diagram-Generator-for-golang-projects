@startuml
namespace parser {
    class ClassParser {
        - structure <font color=blue>map</font>[string]<font color=blue>map</font>[string]*Struct
        - currentPackageName string
        - allInterfaces <font color=blue>map</font>[string]<font color=blue>struct</font>{}
        - allStructs <font color=blue>map</font>[string]<font color=blue>struct</font>{}

        - parsePackage(node ast.Node) 
        - parseFileDeclarations(node ast.Decl) 
        - renderStructures(pack string, structures <font color=blue>map</font>[string]*Struct, str *LineStringBuilder) 
        - renderStructure(structure *Struct, pack string, name string, str *LineStringBuilder, composition *LineStringBuilder, extends *LineStringBuilder) 
        - renderCompositions(structure *Struct, name string, composition *LineStringBuilder) 
        - renderExtends(structure *Struct, name string, extends *LineStringBuilder) 
        - renderStructMethods(structure *Struct, privateMethods *LineStringBuilder, publicMethods *LineStringBuilder) 
        - renderStructFields(structure *Struct, privateFields *LineStringBuilder, publicFields *LineStringBuilder) 
        - getOrCreateStruct(name string) 
        - getStruct(structName string) 

        + Render() 

    }
    class Struct {
        + PackageName string
        + Functions []*Function
        + Fields []*Field
        + Type string
        + Composition []string
        + Extends []string

        + ImplementsInterface(inter *Struct) 
        + AddToComposition(fType string) 
        + AddToExtends(fType string) 
        + AddField(field *ast.Field) 
        + AddMethod(method *ast.Field) 

    }
    class Function {
        + Name string
        + Parameters []*Field
        + ReturnValues []string

        + SignturesAreEqual(function *Function) 

    }
    class Field {
        + Name string
        + Type string

    }
    class LineStringBuilder {
        + WriteLineWithDepth(depth int, str string) 

    }
}
strings.Builder *-- parser.LineStringBuilder


@enduml